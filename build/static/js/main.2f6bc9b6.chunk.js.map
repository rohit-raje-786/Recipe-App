{"version":3,"sources":["Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","props","className","title","src","image","alt","calories","ingredients","map","ingredient","text","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipe","a","fetch","response","json","data","console","log","hits","onSubmit","e","preventDefault","type","value","onChange","target","recipe","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uMAiBeA,G,KAfF,SAACC,GACV,OACI,6BACI,wBAAIC,UAAU,SAASD,EAAME,OAC7B,yBAAMD,UAAU,QAAQE,IAAKH,EAAMI,MAAOC,IAAI,KAC9C,uBAAGJ,UAAU,WAAU,2CAAuBD,EAAMM,UACpD,wBAAIL,UAAU,UACV,wBAAIA,UAAU,eAAd,eACCD,EAAMO,YAAYC,KAAI,SAAAC,GAAU,OAC7B,wBAAIR,UAAU,QAAQQ,EAAWC,aCkCtCC,MAxCf,WACA,IADe,EAIYC,mBAAS,IAJrB,mBAIRC,EAJQ,KAIAC,EAJA,OAKUF,mBAAS,IALnB,mBAKRG,EALQ,KAKDC,EALC,OAMQJ,mBAAS,WANjB,mBAMRK,EANQ,KAMFC,EANE,KAQfC,qBAAU,WAAKC,MAAa,CAACH,IAE7B,IAAMG,EAAS,uCAAC,8BAAAC,EAAA,sEACOC,MAAM,mCAAD,OAAoCL,EAApC,mBAVf,WAUe,oBATd,qCAQE,cACRM,EADQ,gBAEGA,EAASC,OAFZ,OAERC,EAFQ,OAGdC,QAAQC,IAAIF,EAAKG,MACjBd,EAAWW,EAAKG,MAJF,2CAAD,qDAiBb,OACE,yBAAK3B,UAAU,OACb,0BAAM4B,SARI,SAACC,GACfA,EAAEC,iBACFb,EAASH,GACTC,EAAU,MAMJ,2BAAOgB,KAAK,OAAOC,MAAOlB,EAAQd,UAAU,cAAciC,SAd/C,SAACJ,GACpBd,EAAUc,EAAEK,OAAOF,OACnBP,QAAQC,IAAIZ,MAaJ,4BAAQiB,KAAK,SAAS/B,UAAU,aAAhC,WAEDY,EAAQL,KAAI,SAAA4B,GAAM,OACjB,kBAAC,EAAD,CAAQlC,MAAOkC,EAAOA,OAAOC,MAAO/B,SAAU8B,EAAOA,OAAO9B,SAAUF,MAAOgC,EAAOA,OAAOhC,MAAOG,YAAa6B,EAAOA,OAAO7B,mBC3BjH+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.2f6bc9b6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nconst Recipe=(props)=>{\r\n    return(\r\n        <div>\r\n            <h1 className=\"title\">{props.title}</h1>\r\n            <img  className=\"image\" src={props.image} alt=\"\"/>\r\n            <p className=\"calorie\"><span>Calories:</span>{props.calories}</p>\r\n            <ol className=\"ingred\">\r\n                <h2 className=\"ingredtitle\">ingredients</h2>\r\n                {props.ingredients.map(ingredient=>(\r\n                    <li className=\"list\">{ingredient.text}</li>\r\n                ))}\r\n            </ol>\r\n        </div>\r\n    )\r\n};\r\nexport default Recipe;","import React,{useEffect,useState} from 'react';\nimport Recipe from \"./Recipe\";\nimport './App.css';\n\n\nfunction App() {\nconst APP_ID=\"c0582eaf\";\nconst APP_KEY=\"d3f6b5d5823177c19e26331cb9d5c5af\";\n\nconst [recipes,setRecipes]=useState([]);\nconst [search,setSearch]=useState(\"\");\nconst [query,setQuery]=useState('chicken');\n\nuseEffect(()=>{getRecipe()},[query]);\n\nconst getRecipe=async()=>{\n  const response=await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n  const data=await response.json();\n  console.log(data.hits);\n  setRecipes(data.hits);\n};\nconst updateSearch=(e)=>{\nsetSearch(e.target.value);\nconsole.log(search);\n\n};\nconst getSearch=(e)=>{\n  e.preventDefault();\n  setQuery(search);\n  setSearch('');\n}\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={getSearch}>\n        <input type=\"text\" value={search} className=\"searchinput\" onChange={updateSearch}/>\n        <button type=\"submit\" className=\"searchbar\">Search</button>\n      </form>\n      {recipes.map(recipe=>(\n        <Recipe title={recipe.recipe.label} calories={recipe.recipe.calories} image={recipe.recipe.image} ingredients={recipe.recipe.ingredients}/>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}